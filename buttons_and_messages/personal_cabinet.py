import itertools

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from buttons_and_messages.time_zones import MoscowUtcUp3, KaliningradUtcUp2, SamaraUtcUp4, EkaterinburgAndAktauUtcUp5, \
    OmskAndNurSultanUtcUp6, KrasnoyarskUtcUp7, IrkutskUtcUp8, YakutskUtcUp9, VladivostokUtcUp10, MagadanUtcUp11, \
    KamchatkaUtcUp12
from config import NUM_FEED_BUTTONS, FACE_BOT
from utils.states import FSMPersonalCabinetStates, FSMUtilsStates
from .base_classes import Utils, BaseButton, BaseMessage, GoToBack

timezones = [KaliningradUtcUp2(),
             MoscowUtcUp3(),
             SamaraUtcUp4(),
             EkaterinburgAndAktauUtcUp5(),
             OmskAndNurSultanUtcUp6(),
             KrasnoyarskUtcUp7(),
             IrkutskUtcUp8(),
             YakutskUtcUp9(),
             VladivostokUtcUp10(),
             MagadanUtcUp11(),
             KamchatkaUtcUp12()]


# Au7n8BPw0O7ADPCM2MEMQh1PfoKMeTuH7CT-Pnn-_eIHretpsewN14c9_5RyptC0DYc7ttIvfxBTYkcDfzyhNoe2Vq_haFr4MksJ8LKogBwrtA


class UpdateListFeedbacks(BaseButton, Utils):

    def _set_name(self) -> str:
        return 'üåê –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'

    def _set_reply_text(self) -> str | None:
        return FACE_BOT + '<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤:</b>'

    async def _set_answer_logic(self, update: CallbackQuery, state: FSMContext) -> tuple[str, str | None]:
        data = await state.get_data()
        user_id = update.from_user.id
        supplier_name_key = data.get('previous_button')

        # todo —É–±—Ä–∞—Ç—å
        # print('supplier_name_key', supplier_name_key)

        feedbacks = dict()
        buttons = []

        msg = await self.bot.send_message(chat_id=user_id, text=self.default_download_information)

        await self.wb_api.get_feedback_list(supplier=supplier_name_key, user_id=user_id)

        wb_user = self.dbase.wb_user_get_or_none(user_id=user_id)

        await self.bot.delete_message(chat_id=user_id, message_id=msg.message_id)

        if feedbacks := dict(itertools.islice(wb_user.unanswered_feedbacks.items(), NUM_FEED_BUTTONS)):
            buttons = await self.utils_get_or_create_buttons(
                collection=feedbacks, class_type='feedback', update=update,
                supplier_name_key=supplier_name_key, user_id=user_id)

            if not any(button.class_name.startswith('Feedback') for button in buttons):
                buttons = await self.feedback_buttons_logic(supplier=supplier_name_key, update=update)

        if supplier_name_key:
            supplier_button = await self.button_search_and_action_any_collections(action='get',
                                                                                  button_name=supplier_name_key)
            supplier_button.children_buttons = buttons
            # await self.change_name_button(supplier_button, len(buttons) - 1)
            unfeeds_supplier = [feed for feed in wb_user.unanswered_feedbacks.values()
                                if feed.get('supplier') == supplier_button.__class__.__name__]
            await self.m_utils.change_name_button(supplier_button, len(unfeeds_supplier))

        self.children_buttons = buttons
        # self.children_buttons.append(self)

        return self.reply_text, self.next_state


class MessageAfterUserEntersPhone(BaseMessage, Utils):
    def _set_state_or_key(self) -> str:
        return 'FSMUtilsStates:message_after_user_enters_phone'

    async def _set_answer_logic(self, update: Message, state: FSMContext):
        reply_text, next_state = await self.get_access_to_wb_api(update=update, state=state, phone=update.text)
        return reply_text, next_state


class MessageAfterUserEntersSmsCode(BaseMessage, Utils):
    def _set_state_or_key(self) -> str:
        return 'FSMUtilsStates:message_after_user_enters_sms_code'

    def _set_next_state(self) -> str | None:
        return 'reset_state'

    async def _set_answer_logic(self, update: Message, state: FSMContext):
        reply_text = "–ö–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ"
        if await self.get_access_to_wb_api(update=update, state=state, sms_code=update.text):
            reply_text = "–ö–æ–¥ –≤–µ—Ä–Ω—ã–π, –ø–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞ ... "
        return reply_text, self.next_state


class SelectAPIMode(BaseButton, Utils):
    def _set_name(self) -> str:
        return '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–æ API'

    def _set_reply_text(self) -> str | None:
        return FACE_BOT + '<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:</b>'

    def _set_children(self) -> list:
        return [GoToBack(new=False)]

    def _set_messages(self) -> dict:
        messages = [MessageAfterUserEntersPhone(button=self, parent_name=self.class_name),
                    MessageAfterUserEntersSmsCode(button=self, parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}

    async def _set_answer_logic(self, update: Message, state: FSMContext):
        reply_text, next_state = self.reply_text, self.next_state
        user_id = update.from_user.id

        result = await self.get_access_to_wb_api(update=update, state=state)
        if isinstance(result, tuple):
            reply_text, next_state = result
        else:
            if suppliers_buttons := await self.api_suppliers_buttons_logic(update=update, state=state, user_id=user_id):
                self.children_buttons = suppliers_buttons

        return reply_text, next_state


class MessageEnterSupplierIDMode(BaseMessage, Utils):
    def _set_state_or_key(self) -> str:
        return 'FSMUtilsStates:enter_supplier_id_mode'

    def _set_reply_text(self) -> str | None:
        return FACE_BOT + '<b>–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ</b>'

    def _set_next_state(self) -> str | None:
        return 'reset_state'

    def _set_children(self) -> list:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: FSMContext | None = None):
        supplier_id = await self.m_utils.check_data(update.text)

        if supplier_id:
            reply_text, next_state = self.default_service_in_dev, self.next_state  # —Ç—É—Ç –Ω—É–∂–Ω–æ reset state
            supplier = await self.wb_parsing(supplier_id=supplier_id, update=update)

            # TODO –≤—ã–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ supplier –∏ –µ–≥–æ feedbacks
            if suppliers_buttons := await self.parsing_suppliers_buttons_logic(
                    update=update, state=state, user_id=update.from_user.id):

                reply_text = self.reply_text
                self.children_buttons = suppliers_buttons

            else:
                reply_text, next_state = f'–ú–∞–≥–∞–∑–∏–Ω —Å ID: {supplier_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID', None
        else:
            reply_text, next_state = self.default_incorrect_data_input_text.format(text='–≤–≤–µ–¥–∏—Ç–µ ID –º–∞–≥–∞–∑–∏–Ω–∞'), None

        return reply_text, next_state


class EnterSupplierID(BaseButton):
    def _set_name(self) -> str:
        return '–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω'

    def _set_reply_text(self) -> str | None:
        return FACE_BOT + '–í–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞'

    def _set_children(self) -> list:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> str | None:
        return FSMUtilsStates.enter_supplier_id_mode

    def _set_messages(self) -> dict:
        message = MessageEnterSupplierIDMode(button=self)
        return {message.state_or_key: message}


class SelectSupplierIDMode(BaseButton, Utils):
    def _set_name(self) -> str:
        return '–†–∞–±–æ—Ç–∞ –ø–æ ID –º–∞–≥–∞–∑–∏–Ω–∞'

    def _set_reply_text(self) -> str | None:
        return FACE_BOT + '<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:</b>'

    def _set_children(self) -> list:
        return [EnterSupplierID(parent_button=self, parent_name=self.class_name), GoToBack(new=False)]

    async def _set_answer_logic(self, update, state):
        reply_text, next_state = FACE_BOT + ' <b>–ú–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ</b>', self.next_state

        if parsing_suppliers := await self.parsing_suppliers_buttons_logic(update=update, state=state,
                                                                           user_id=update.from_user.id):
            reply_text = self.reply_text
            self.children_buttons = parsing_suppliers

        return reply_text, next_state


class WildberriesCabinet(BaseButton):

    def _set_name(self) -> str:
        return 'üè™ –ú–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:'

    def _set_next_state(self) -> str | None:
        return 'reset_state'

    def _set_children(self) -> list:
        return [SelectAPIMode(parent_button=self, parent_name=self.class_name),
                SelectSupplierIDMode(parent_button=self, parent_name=self.class_name),
                GoToBack(new=False)]


class AroundTheClock(BaseButton):
    def _set_name(self) -> str:
        return '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è üïê'

    def _set_children(self) -> list:
        return timezones + [GoToBack(new=False)]

    async def _set_answer_logic(self, update, state):
        self.dbase.update_wb_user(
            user_id=update.from_user.id,
            update_data={'notification_times': 'around_the_clock'}
        )

        return self.reply_text, self.next_state


class DayFrom9To18Hours(BaseButton):
    def _set_name(self) -> str:
        return '–î–µ–Ω—å —Å 9 –¥–æ 18 —á–∞—Å–æ–≤'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è üïê'

    def _set_children(self) -> list:
        return timezones + [GoToBack(new=False)]

    async def _set_answer_logic(self, update, state):
        self.dbase.update_wb_user(
            user_id=update.from_user.id,
            update_data={'notification_times': '9-18'}
        )
        return self.reply_text, self.next_state


class FullDayFrom9To21Hours(BaseButton):
    def _set_name(self) -> str:
        return '–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å —Å 9 –¥–æ 21 —á–∞—Å–∞'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è üïê'

    def _set_children(self) -> list:
        return timezones + [GoToBack(new=False)]

    async def _set_answer_logic(self, update, state):
        self.dbase.update_wb_user(
            user_id=update.from_user.id,
            update_data={'notification_times': '9-21'}
        )
        return self.reply_text, self.next_state


class MessageEnterYourselfSetUpNotificationTimes(BaseMessage):
    def _set_state_or_key(self) -> str:
        return 'FSMPersonalCabinetStates:enter_yourself_set_up_notification_times'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è üïê'

    def _set_children(self) -> list:
        return timezones + [GoToBack(new=False)]

    async def _set_answer_logic(self, update, state: FSMContext):
        enter_data = update.text.replace(' ', '')
        period = enter_data.split('-')
        if len(period) == 2 and all([sym.isdigit() and int(sym) in range(25) for sym in period]):
            # and period[0] > period[1]:

            self.children_buttons = self._set_children()
            self.dbase.update_wb_user(
                user_id=update.from_user.id,
                update_data={'notification_times': enter_data}
            )

            text = self.reply_text
            next_state = 'reset_state'
        else:
            text = self.default_incorrect_data_input_text.format(text='–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 5-17')
            self.children_buttons.clear()
            next_state = None
        return text, next_state


class EnterYourself(BaseButton):
    def _set_name(self) -> str:
        return '–í–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9 - 18'

    def _set_children(self) -> list:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> str | None:
        return FSMPersonalCabinetStates.enter_yourself_set_up_notification_times

    def _set_messages(self) -> dict:
        message = MessageEnterYourselfSetUpNotificationTimes(self.button_id)
        return {message.state_or_key: message}


class SetUpNotificationTimes(BaseButton):
    def _set_name(self) -> str:
        return '"‚è∞ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '<b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>'

    def _set_children(self) -> list:
        return [AroundTheClock(parent_name=self.__class__.__name__),
                DayFrom9To18Hours(parent_name=self.__class__.__name__),
                FullDayFrom9To21Hours(parent_name=self.__class__.__name__),
                EnterYourself(parent_name=self.__class__.__name__),
                # GoToBack(new=False)
                ]


class MessageEnterSignatureForSignatureToTheAnswerButton(BaseMessage):

    def _set_state_or_key(self) -> str:
        return 'FSMPersonalCabinetStates:enter_signature'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '–í–∞—à–∞ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'

    def _set_next_state(self) -> str:
        return 'reset_state'

    def _set_children(self) -> list:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update, state: FSMContext):
        reply_text, next_state = self.reply_text, self.next_state

        self.dbase.update_wb_user(
            user_id=update.from_user.id,
            update_data={'signature_to_answer': update.text}
        )

        await self.bot.delete_message(chat_id=update.from_user.id, message_id=update.message_id)
        data = await state.get_data()
        await self.bot.delete_message(chat_id=update.from_user.id, message_id=data.get('last_handler_sent_message_id'))
        button = await self.button_search_and_action_any_collections(action='get', button_name=self.parent_name)
        if button:
            reply_text, next_state = await button._set_answer_logic(update, state)
        return reply_text, next_state


class SignatureToTheAnswer(BaseButton, Utils):
    def _set_name(self) -> str:
        return '‚úí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—è–º–∏ –∫ –æ—Ç–≤–µ—Ç—É'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:</b>'

    def _set_next_state(self) -> str:
        return FSMPersonalCabinetStates.enter_signature

    def _set_messages(self) -> dict:
        messages = [
            MessageEnterSignatureForSignatureToTheAnswerButton(self.button_id, parent_name=self.__class__.__name__)]
        return {message.state_or_key: message for message in messages}

    async def _set_answer_logic(self, update, state: FSMContext):
        signature = self.default_bad_text

        if wb_user := self.dbase.wb_user_get_or_none(user_id=update.from_user.id):
            signature = wb_user.signature_to_answer

        reply_text, next_state = f"<b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å:</b>\n\n{signature}\n\n" + self.reply_text, self.next_state
        # result = await self.get_access_to_wb_api(update=update, state=state)
        # if isinstance(result, tuple):
        #     reply_text, next_state = result

        return reply_text, next_state


create_buttons = [UpdateListFeedbacks()]
